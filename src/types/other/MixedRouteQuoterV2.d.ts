/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MixedRouteQuoterV2Interface extends ethers.utils.Interface {
  functions: {
    "poolManager()": FunctionFragment;
    "quoteExactInput(bytes,(tuple[]),uint256)": FunctionFragment;
    "quoteExactInputSingleV2((address,address,uint256))": FunctionFragment;
    "quoteExactInputSingleV3((address,address,uint256,uint24,uint160))": FunctionFragment;
    "uniswapV2Poolfactory()": FunctionFragment;
    "uniswapV3Poolfactory()": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "unlockCallback(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactInput",
    values: [
      BytesLike,
      { nonEncodableData: { hookData: BytesLike }[] },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactInputSingleV2",
    values: [{ tokenIn: string; tokenOut: string; amountIn: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactInputSingleV3",
    values: [
      {
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumberish;
        fee: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Poolfactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Poolfactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockCallback",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactInputSingleV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactInputSingleV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Poolfactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Poolfactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export class MixedRouteQuoterV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MixedRouteQuoterV2Interface;

  functions: {
    poolManager(overrides?: CallOverrides): Promise<[string]>;

    quoteExactInput(
      path: BytesLike,
      param: { nonEncodableData: { hookData: BytesLike }[] },
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoteExactInputSingleV2(
      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    quoteExactInputSingleV3(
      params: {
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumberish;
        fee: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Poolfactory(overrides?: CallOverrides): Promise<[string]>;

    uniswapV3Poolfactory(overrides?: CallOverrides): Promise<[string]>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      path: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  poolManager(overrides?: CallOverrides): Promise<string>;

  quoteExactInput(
    path: BytesLike,
    param: { nonEncodableData: { hookData: BytesLike }[] },
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoteExactInputSingleV2(
    params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteExactInputSingleV3(
    params: {
      tokenIn: string;
      tokenOut: string;
      amountIn: BigNumberish;
      fee: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Poolfactory(overrides?: CallOverrides): Promise<string>;

  uniswapV3Poolfactory(overrides?: CallOverrides): Promise<string>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    path: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  unlockCallback(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    poolManager(overrides?: CallOverrides): Promise<string>;

    quoteExactInput(
      path: BytesLike,
      param: { nonEncodableData: { hookData: BytesLike }[] },
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; gasEstimate: BigNumber }
    >;

    quoteExactInputSingleV2(
      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteExactInputSingleV3(
      params: {
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumberish;
        fee: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; gasEstimate: BigNumber }
    >;

    uniswapV2Poolfactory(overrides?: CallOverrides): Promise<string>;

    uniswapV3Poolfactory(overrides?: CallOverrides): Promise<string>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      path: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockCallback(data: BytesLike, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    quoteExactInput(
      path: BytesLike,
      param: { nonEncodableData: { hookData: BytesLike }[] },
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoteExactInputSingleV2(
      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteExactInputSingleV3(
      params: {
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumberish;
        fee: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Poolfactory(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3Poolfactory(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      path: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteExactInput(
      path: BytesLike,
      param: { nonEncodableData: { hookData: BytesLike }[] },
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoteExactInputSingleV2(
      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteExactInputSingleV3(
      params: {
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumberish;
        fee: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Poolfactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV3Poolfactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      path: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
