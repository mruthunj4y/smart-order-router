import { ChainId } from '@surge/sdk-core';
import { WRAPPED_NATIVE_CURRENCY } from '../util';
import { AVAX_XRPL_EVM_TESTNET, AXL_XRPL_EVM_TESTNET, BNB_XRPL_EVM_TESTNET, DAI_XRPL_EVM_TESTNET, MATIC_XRPL_EVM_TESTNET, RLUSD_XRPL_EVM_TESTNET, SOL_XRPL_EVM_TESTNET, TON_XRPL_EVM_TESTNET, TRON_XRPL_EVM_TESTNET, USDC_XRPL_EVM_TESTNET, USDT_XRPL_EVM_TESTNET, WETH_XRPL_EVM_TESTNET, } from './token-provider';
export const BASES_TO_CHECK_TRADES_AGAINST = {
    [ChainId.XRPL_EVM_TESTNET]: [
        WRAPPED_NATIVE_CURRENCY[ChainId.XRPL_EVM_TESTNET],
        WETH_XRPL_EVM_TESTNET,
        DAI_XRPL_EVM_TESTNET,
        TON_XRPL_EVM_TESTNET,
        TRON_XRPL_EVM_TESTNET,
        SOL_XRPL_EVM_TESTNET,
        USDC_XRPL_EVM_TESTNET,
        RLUSD_XRPL_EVM_TESTNET,
        MATIC_XRPL_EVM_TESTNET,
        AXL_XRPL_EVM_TESTNET,
        AVAX_XRPL_EVM_TESTNET,
        USDT_XRPL_EVM_TESTNET,
        BNB_XRPL_EVM_TESTNET,
    ],
    [ChainId.ARBITRUM_SEPOLIA]: [
        WRAPPED_NATIVE_CURRENCY[ChainId.ARBITRUM_SEPOLIA],
    ],
};
export class CachingSubgraphProvider {
    /**
     * Creates an instance of CachingV3SubgraphProvider.
     * @param chainId The chain id to use.
     * @param subgraphProvider The provider to use to get the subgraph pools when not in the cache.
     * @param cache Cache instance to hold cached pools.
     * @param protocol Subgraph protocol version
     */
    constructor(chainId, subgraphProvider, cache, protocol) {
        this.chainId = chainId;
        this.subgraphProvider = subgraphProvider;
        this.cache = cache;
        this.protocol = protocol;
        this.SUBGRAPH_KEY = (chainId) => `subgraph-pools-${this.
            protocol}-${chainId}`;
    }
    async getPools() {
        const cachedPools = await this.cache.get(this.SUBGRAPH_KEY(this.chainId));
        if (cachedPools) {
            return cachedPools;
        }
        const pools = await this.subgraphProvider.getPools();
        await this.cache.set(this.SUBGRAPH_KEY(this.chainId), pools);
        return pools;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZy1zdWJncmFwaC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm92aWRlcnMvY2FjaGluZy1zdWJncmFwaC1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFTLE1BQU0saUJBQWlCLENBQUM7QUFHakQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBSWxELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsb0JBQW9CLEVBQ3BCLG9CQUFvQixFQUNwQixvQkFBb0IsRUFDcEIsc0JBQXNCLEVBQ3RCLHNCQUFzQixFQUN0QixvQkFBb0IsRUFDcEIsb0JBQW9CLEVBQ3BCLHFCQUFxQixFQUNyQixxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLHFCQUFxQixHQUN0QixNQUFNLGtCQUFrQixDQUFDO0FBTzFCLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFtQjtJQUMzRCxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1FBQzFCLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBRTtRQUNsRCxxQkFBcUI7UUFDckIsb0JBQW9CO1FBQ3BCLG9CQUFvQjtRQUNwQixxQkFBcUI7UUFDckIsb0JBQW9CO1FBQ3BCLHFCQUFxQjtRQUNyQixzQkFBc0I7UUFDdEIsc0JBQXNCO1FBQ3RCLG9CQUFvQjtRQUNwQixxQkFBcUI7UUFDckIscUJBQXFCO1FBQ3JCLG9CQUFvQjtLQUNyQjtJQUNELENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDMUIsdUJBQXVCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFFO0tBQ25EO0NBQ0YsQ0FBQztBQWtCRixNQUFNLE9BQWdCLHVCQUF1QjtJQU8zQzs7Ozs7O09BTUc7SUFDSCxZQUNVLE9BQWdCLEVBQ2QsZ0JBQWtELEVBQ3BELEtBQThCLEVBQzlCLFFBQWtCO1FBSGxCLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtDO1FBQ3BELFVBQUssR0FBTCxLQUFLLENBQXlCO1FBQzlCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFmcEIsaUJBQVksR0FBRyxDQUFDLE9BQWdCLEVBQUUsRUFBRSxDQUMxQyxrQkFBa0IsSUFBSTtZQUNwQixRQUFRLElBQUksT0FBTyxFQUFFLENBQUM7SUFjdEIsQ0FBQztJQUVFLEtBQUssQ0FBQyxRQUFRO1FBQ25CLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUUxRSxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO1FBRUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFckQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU3RCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRiJ9