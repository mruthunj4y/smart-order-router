"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WNATIVE_ON = exports.USDC_ON = exports.USDT_ON = exports.DAI_ON = exports.TokenProvider = exports.DAI_ARBITRUM_SEPOLIA = exports.USDC_ARBITRUM_SEPOLIA = exports.DAI_XRPL_EVM_TESTNET = exports.WXRP_XRPL_EVM_TESTNET = exports.TON_XRPL_EVM_TESTNET = exports.TRON_XRPL_EVM_TESTNET = exports.SOL_XRPL_EVM_TESTNET = exports.USDC_XRPL_EVM_TESTNET = exports.RLUSD_XRPL_EVM_TESTNET = exports.MATIC_XRPL_EVM_TESTNET = exports.AXL_XRPL_EVM_TESTNET = exports.AVAX_XRPL_EVM_TESTNET = exports.USDT_XRPL_EVM_TESTNET = exports.BNB_XRPL_EVM_TESTNET = exports.WETH_XRPL_EVM_TESTNET = exports.XRPL_EVM_TESTNET_PERMIT2_ADDRESS = exports.XRPL_EVM_TESTNET_DAI_ADDRESS = exports.XRPL_EVM_TESTNET_WXRP_ADDRESS = exports.XRPL_EVM_TESTNET_TON_ADDRESS = exports.XRPL_EVM_TESTNET_TRON_ADDRESS = exports.XRPL_EVM_TESTNET_SOL_ADDRESS = exports.XRPL_EVM_TESTNET_USDC_ADDRESS = exports.XRPL_EVM_TESTNET_RLUSD_ADDRESS = exports.XRPL_EVM_TESTNET_MATIC_ADDRESS = exports.XRPL_EVM_TESTNET_AXL_ADDRESS = exports.XRPL_EVM_TESTNET_AVAX_ADDRESS = exports.XRPL_EVM_TESTNET_USDT_ADDRESS = exports.XRPL_EVM_TESTNET_BNB_ADDRESS = exports.XRPL_EVM_TESTNET_WETH_ADDRESS = void 0;
const abi_1 = require("@ethersproject/abi");
const strings_1 = require("@ethersproject/strings");
const sdk_core_1 = require("@surge/sdk-core");
const lodash_1 = __importDefault(require("lodash"));
const IERC20Metadata__factory_1 = require("../types/IERC20Metadata__factory");
const util_1 = require("../util");
exports.XRPL_EVM_TESTNET_WETH_ADDRESS = '0xf4ddC1c80e7E04A09b58ce15503E99CfC60B4390';
exports.XRPL_EVM_TESTNET_BNB_ADDRESS = '0x96b97B80Ca1af8d77C593760Df968d9c43b1a7A4';
exports.XRPL_EVM_TESTNET_USDT_ADDRESS = '0xF31ab0b1EC6a6791eb6E2B27Ab3417Fe811E7f24';
exports.XRPL_EVM_TESTNET_AVAX_ADDRESS = '0x0FeCF7d547C33D7b186091224aC10B430D42D2bf';
exports.XRPL_EVM_TESTNET_AXL_ADDRESS = '0x49Bdf872157b71760B119b47aFeE580d7d1F53D6';
exports.XRPL_EVM_TESTNET_MATIC_ADDRESS = '0x681598F683d51d7AFe4bA158A47d88e9B6512CB1';
exports.XRPL_EVM_TESTNET_RLUSD_ADDRESS = '0x83Ea87C05E240f5BdE442d64a1d2b450fB0a7841';
exports.XRPL_EVM_TESTNET_USDC_ADDRESS = '0x13EB4F7a4079C3E9A67e4bff3245c4cFF41d85cE';
exports.XRPL_EVM_TESTNET_SOL_ADDRESS = '0xb9D15DD97Bf3De441A774EbE80bDa98F636b06b7';
exports.XRPL_EVM_TESTNET_TRON_ADDRESS = '0x67726D94C29b43f1A3C35221BBE3bcb6FdF85F9B';
exports.XRPL_EVM_TESTNET_TON_ADDRESS = '0x5B8e8F1246A0a2CBDA032169c3C699Db1887B1FD';
exports.XRPL_EVM_TESTNET_WXRP_ADDRESS = '0x81Be083099c2C65b062378E74Fa8469644347BB7';
exports.XRPL_EVM_TESTNET_DAI_ADDRESS = '0xeBD8479f1DF837e4169D2A69663e1CeDE6A6FC1A';
exports.XRPL_EVM_TESTNET_PERMIT2_ADDRESS = '0x3944ebE5fF76D1dB5D265B0A196CeD7d14DAeeB5';
exports.WETH_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_WETH_ADDRESS, 18, 'WETH', 'Wrapped Ether');
exports.BNB_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_BNB_ADDRESS, 18, 'BNB', 'Binance Coin');
exports.USDT_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_USDT_ADDRESS, 6, 'USDT', 'Tether USD');
exports.AVAX_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_AVAX_ADDRESS, 18, 'AVAX', 'Avalanche');
exports.AXL_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_AXL_ADDRESS, 18, 'AXL', 'Axelar');
exports.MATIC_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_MATIC_ADDRESS, 18, 'MATIC', 'Polygon');
exports.RLUSD_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_RLUSD_ADDRESS, 18, 'RLUSD', 'RLUSD');
exports.USDC_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_USDC_ADDRESS, 6, 'USDC', 'USD Coin');
exports.SOL_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_SOL_ADDRESS, 18, 'SOL', 'Solana');
exports.TRON_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_TRON_ADDRESS, 18, 'TRON', 'Tron');
exports.TON_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_TON_ADDRESS, 18, 'TON', 'Toncoin');
exports.WXRP_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_WXRP_ADDRESS, 18, 'WXRP', 'Wrapped XRP');
exports.DAI_XRPL_EVM_TESTNET = new sdk_core_1.Token(sdk_core_1.ChainId.XRPL_EVM_TESTNET, exports.XRPL_EVM_TESTNET_DAI_ADDRESS, 18, 'DAI', 'Dai Stablecoin');
exports.USDC_ARBITRUM_SEPOLIA = new sdk_core_1.Token(sdk_core_1.ChainId.ARBITRUM_SEPOLIA, '0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d', 6, 'USDC', 'USD//C');
exports.DAI_ARBITRUM_SEPOLIA = new sdk_core_1.Token(sdk_core_1.ChainId.ARBITRUM_SEPOLIA, '0xc3826E277485c33F3D99C9e0CBbf8449513210EE', 18, 'DAI', 'Dai Stablecoin');
class TokenProvider {
    constructor(chainId, multicall2Provider) {
        this.chainId = chainId;
        this.multicall2Provider = multicall2Provider;
    }
    async getTokenSymbol(addresses, providerConfig) {
        let result;
        let isBytes32 = false;
        try {
            result =
                await this.multicall2Provider.callSameFunctionOnMultipleContracts({
                    addresses,
                    contractInterface: IERC20Metadata__factory_1.IERC20Metadata__factory.createInterface(),
                    functionName: 'symbol',
                    providerConfig,
                });
        }
        catch (error) {
            util_1.log.error({ addresses }, `TokenProvider.getTokenSymbol[string] failed with error ${error}. Trying with bytes32.`);
            const bytes32Interface = new abi_1.Interface([
                {
                    inputs: [],
                    name: 'symbol',
                    outputs: [
                        {
                            internalType: 'bytes32',
                            name: '',
                            type: 'bytes32',
                        },
                    ],
                    stateMutability: 'view',
                    type: 'function',
                },
            ]);
            try {
                result =
                    await this.multicall2Provider.callSameFunctionOnMultipleContracts({
                        addresses,
                        contractInterface: bytes32Interface,
                        functionName: 'symbol',
                        providerConfig,
                    });
                isBytes32 = true;
            }
            catch (error) {
                util_1.log.fatal({ addresses }, `TokenProvider.getTokenSymbol[bytes32] failed with error ${error}.`);
                throw new Error('[TokenProvider.getTokenSymbol] Impossible to fetch token symbol.');
            }
        }
        return { result, isBytes32 };
    }
    async getTokenDecimals(addresses, providerConfig) {
        return this.multicall2Provider.callSameFunctionOnMultipleContracts({
            addresses,
            contractInterface: IERC20Metadata__factory_1.IERC20Metadata__factory.createInterface(),
            functionName: 'decimals',
            providerConfig,
        });
    }
    async getTokens(_addresses, providerConfig) {
        var _a;
        const addressToToken = {};
        const symbolToToken = {};
        const addresses = (0, lodash_1.default)(_addresses)
            .map((address) => address.toLowerCase())
            .uniq()
            .value();
        if (addresses.length > 0) {
            const [symbolsResult, decimalsResult] = await Promise.all([
                this.getTokenSymbol(addresses, providerConfig),
                this.getTokenDecimals(addresses, providerConfig),
            ]);
            const isBytes32 = symbolsResult.isBytes32;
            const { results: symbols } = symbolsResult.result;
            const { results: decimals } = decimalsResult;
            for (let i = 0; i < addresses.length; i++) {
                const address = addresses[i];
                if (!address)
                    continue;
                const symbolResult = symbols[i];
                const decimalResult = decimals[i];
                if (!(symbolResult === null || symbolResult === void 0 ? void 0 : symbolResult.success) || !(decimalResult === null || decimalResult === void 0 ? void 0 : decimalResult.success)) {
                    util_1.log.info({
                        symbolResult,
                        decimalResult,
                    }, `Dropping token with address ${address} as symbol or decimal are invalid`);
                    continue;
                }
                const symbol = isBytes32
                    ? (symbolResult.result[0] ? (0, strings_1.parseBytes32String)(symbolResult.result[0]) : '')
                    : symbolResult.result[0] || '';
                const decimal = (_a = decimalResult.result[0]) !== null && _a !== void 0 ? _a : 18;
                if (!symbol)
                    continue;
                const token = new sdk_core_1.Token(this.chainId, address, decimal, symbol);
                addressToToken[address.toLowerCase()] = token;
                symbolToToken[symbol.toLowerCase()] = token;
            }
            util_1.log.info(`Got token symbol and decimals for ${Object.values(addressToToken).length} out of ${addresses.length} tokens on-chain ${providerConfig ? `as of: ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}` : ''}`);
        }
        return {
            getTokenByAddress: (address) => {
                return addressToToken[address.toLowerCase()];
            },
            getTokenBySymbol: (symbol) => {
                return symbolToToken[symbol.toLowerCase()];
            },
            getAllTokens: () => {
                return Object.values(addressToToken).filter((t) => t !== undefined);
            },
        };
    }
}
exports.TokenProvider = TokenProvider;
const DAI_ON = (chainId) => {
    switch (chainId) {
        case sdk_core_1.ChainId.XRPL_EVM_TESTNET:
            return exports.DAI_XRPL_EVM_TESTNET;
        case sdk_core_1.ChainId.ARBITRUM_SEPOLIA:
            return exports.DAI_ARBITRUM_SEPOLIA;
        default:
            throw new Error(`Chain id: ${chainId} not supported`);
    }
};
exports.DAI_ON = DAI_ON;
const USDT_ON = (chainId) => {
    switch (chainId) {
        case sdk_core_1.ChainId.XRPL_EVM_TESTNET:
            return exports.USDT_XRPL_EVM_TESTNET;
        default:
            throw new Error(`Chain id: ${chainId} not supported`);
    }
};
exports.USDT_ON = USDT_ON;
const USDC_ON = (chainId) => {
    switch (chainId) {
        case sdk_core_1.ChainId.XRPL_EVM_TESTNET:
            return exports.USDC_XRPL_EVM_TESTNET;
        case sdk_core_1.ChainId.ARBITRUM_SEPOLIA:
            return exports.USDC_ARBITRUM_SEPOLIA;
        default:
            throw new Error(`Chain id: ${chainId} not supported`);
    }
};
exports.USDC_ON = USDC_ON;
const WNATIVE_ON = (chainId) => {
    const token = util_1.WRAPPED_NATIVE_CURRENCY[chainId];
    if (!token) {
        throw new Error(`No wrapped native token for chainId: ${chainId}`);
    }
    return token;
};
exports.WNATIVE_ON = WNATIVE_ON;
//# sourceMappingURL=data:application/json;base64,