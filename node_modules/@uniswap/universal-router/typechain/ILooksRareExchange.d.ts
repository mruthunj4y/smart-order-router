/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ILooksRareExchangeInterface extends ethers.utils.Interface {
  functions: {
    "matchAskWithTakerBidUsingETHAndWETH(tuple,tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "matchAskWithTakerBidUsingETHAndWETH",
    values: [
      {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "matchAskWithTakerBidUsingETHAndWETH",
    data: BytesLike
  ): Result;

  events: {};
}

export class ILooksRareExchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ILooksRareExchangeInterface;

  functions: {
    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))"(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  matchAskWithTakerBidUsingETHAndWETH(
    takerBid: {
      isOrderAsk: boolean;
      taker: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
    },
    makerAsk: {
      isOrderAsk: boolean;
      signer: string;
      collection: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      strategy: string;
      currency: string;
      nonce: BigNumberish;
      startTime: BigNumberish;
      endTime: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))"(
    takerBid: {
      isOrderAsk: boolean;
      taker: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
    },
    makerAsk: {
      isOrderAsk: boolean;
      signer: string;
      collection: string;
      price: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      strategy: string;
      currency: string;
      nonce: BigNumberish;
      startTime: BigNumberish;
      endTime: BigNumberish;
      minPercentageToAsk: BigNumberish;
      params: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))"(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))"(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))"(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        strategy: string;
        currency: string;
        nonce: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        minPercentageToAsk: BigNumberish;
        params: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
